apply plugin: 'war'
apply plugin: 'idea'
//apply plugin: 'arquillian'

version = '1.0-SNAPSHOT'

ext.libraryVersions = [
    junit: '4.8.1', arquillian: '1.1.1.Final', jbossJavaeeSpec: '1.0.0.Final', weld: '1.1.1.Final',
    slf4j: '1.5.10', log4j: '1.2.14', jbossAS6: '6.0.0.Final', glassfish: '4.0', cdi: '1.0-SP4',
    hamcrest: '1.2', jbossAS7: '7.1.1.Final', shrinkwrapDesc: '2.0.0-alpha-3'
]

repositories {
    mavenCentral()
    mavenLocal()
    mavenRepo url: 'http://repository.jboss.org/nexus/content/groups/public'
    mavenRepo url: 'http://repository.jboss.org/nexus/content/repositories/deprecated'
}

configurations {
    provided
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime

    jbossAS7ManagedTestRuntime { extendsFrom integrationTestRuntime, provided }
    //    jbossAS7RemoteTestRuntime { extendsFrom testRuntime, compileOnly }
    glassfishEmbeddedTestRuntime { extendsFrom integrationTestRuntime }
    glassfishManagedTestRuntime { extendsFrom integrationTestRuntime }
}

sourceSets {
    main {
        compileClasspath = configurations.compile + configurations.provided
    }
    integrationTest {
        java {
            srcDir 'src/integrationTest/java'
        }
        resources {
            srcDir 'src/integrationTest/resources'
        }
        compileClasspath += main.output + configurations.provided
        runtimeClasspath += main.output + configurations.provided
    }
}

dependencies {
    provided 'javax:javaee-api:7.0'
    compile 'org.webjars:bootstrap:3.0.0'
    compile 'org.webjars:jquery:1.10.2'
    compile 'org.webjars:jquery-ui:1.10.2'
    compile 'com.google.code.gson:gson:2.2.4'

    testCompile 'junit:junit:4.11'
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: libraryVersions.hamcrest

    integrationTestCompile group: 'org.jboss.arquillian.junit', name: 'arquillian-junit-container', version: libraryVersions.arquillian
    integrationTestCompile group: 'org.jboss.shrinkwrap.descriptors', name: 'shrinkwrap-descriptors-api-javaee', version: libraryVersions.shrinkwrapDesc

    integrationTestRuntime group: 'org.jboss.shrinkwrap.descriptors', name: 'shrinkwrap-descriptors-impl-javaee', version: libraryVersions.shrinkwrapDesc

    jbossAS7ManagedTestRuntime group: 'org.jboss.as', name: 'jboss-as-arquillian-container-managed', version: libraryVersions.jbossAS7
    jbossAS7ManagedTestRuntime group: 'org.jboss.spec', name: 'jboss-javaee-6.0', version: libraryVersions.jbossJavaeeSpec

    glassfishEmbeddedTestRuntime 'org.jboss.arquillian.container:arquillian-glassfish-embedded-3.1:1.0.0.CR4'
    glassfishEmbeddedTestRuntime "org.glassfish.main.extras:glassfish-embedded-all:$libraryVersions.glassfish"
    glassfishEmbeddedTestRuntime 'org.postgresql:postgresql:9.2-1003-jdbc4'

    glassfishManagedTestRuntime group: 'org.jboss.arquillian.container', name: 'arquillian-glassfish-managed-3.1', version: '1.0.0.CR4'
    //    glassfishManagedTestRuntime group: 'org.glassfish.main.distributions', name: 'glassfish', version: '4.0'
}

task jbossAS7ManagedTest(type: Test)

task glassfishEmbeddedTest(type: Test)

task glassfishManagedTest(type: Test)

tasks.withType(Test).matching({ t-> t.name.endsWith('Test') } as Spec).each { t ->
    t.dependsOn 'test'
    t.testClassesDir = project.sourceSets.integrationTest.output.classesDir
    t.classpath = project.configurations.getByName(t.name + 'Runtime') +
        project.sourceSets.main.output +
        project.sourceSets.integrationTest.output
    if (t.name.startsWith('jbossas')) {
        t.classpath += files('src/integrationTest/resources-jbossas')
    }
}

def getCkEditor() {
    if (!file( "src/main/webapp/js/ckeditor").exists() ) {
        ant.get(src: 'http://download.cksource.com/CKEditor/CKEditor/CKEditor%204.2/ckeditor_4.2_standard.zip',
            dest : "$buildDir/dependency-cache/",
            usetimestamp : true,
            verbose:true)
        ant.unzip(src:"$buildDir/dependency-cache/ckeditor_4.2_standard.zip",
            dest: "src/main/webapp/js")
    }
}

task cleanExtra(type: Delete) {
    delete 'src/main/webapp/js/ckeditor'
}

compileJava.doLast {
    getCkEditor()
}

war.doLast {
    ant.unzip(src: war.archivePath, dest: "$buildDir/exploded")
}

clean.dependsOn cleanExtra
